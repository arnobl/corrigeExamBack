entity Course {
	name String required
}

entity CourseGroup {
	groupName String required
}

entity Student {
	name String required
	firstname String
	ine String required
	caslogin String
	mail String
}

entity Exam {
	name String required
}

entity Template {
	name String required
	content Blob
    mark Boolean
    autoMapStudentCopyToList Boolean
}

entity Question {
	numero Integer required
    point Integer
    step Integer
    validExpression String
    gradeType GradeType

    // Add default point
    defaultpoint Integer // Between 0 and 100

}

enum GradeType {
  DIRECT,
  POSITIVE,
  NEGATIVE,
  HYBRID
}

entity QuestionType {
	algoName String required
    endpoint String //rest endppoint to send the Question scan (back execution)
    jsFunction String //js function to send the Question scan (front execution)
}


entity ExamSheet {
	name String required
    pagemin Integer
    pagemax Integer
}

entity Scan {
	name String required
	content Blob
}

entity FinalResult {
	note Integer
    frozen Boolean
}


entity StudentResponse {
	quarternote Integer
    star Boolean
    worststar Boolean

}

entity TextComment {
	text String
	description TextBlob
}

entity GradedComment {
	text String
    description TextBlob
	grade Integer
}


entity Comments {
	zonegeneratedid String
	jsonData TextBlob
}


entity Zone {
    pageNumber Integer
	xInit Integer
	yInit Integer
	width Integer
	height Integer
}

// New
entity HybridGradedComment {
	text String
    description TextBlob
	grade Integer
    relative Boolean
    step Integer
}
entity Answer2HybridGradedComment {
    stepValue Integer
}



relationship ManyToOne {
    FinalResult{student(name)} to Student
    FinalResult{exam(name)} to Exam
    StudentResponse{question(numero)} to Question
    StudentResponse{sheet(name)} to ExamSheet
    Question{type(algoName)} to QuestionType
    // new
    Answer2HybridGradedComment{hybridcomments(text)} to HybridGradedComment{valueAnswer}


}

relationship OneToMany{
    Course{exam(name)} to Exam{course(name)}
	Course{groups(groupName)} to CourseGroup{course(name)}
	Exam{question(numero)} to Question{exam(name)}
    StudentResponse{comments} to Comments{studentResponse}
    Scan{sheets} to ExamSheet{scan(name)}
    Question{textcomments} to TextComment{question}
    Question{gradedcomments} to GradedComment{question}
    // new
    Question{hybridcomments(text)} to HybridGradedComment{question}
    StudentResponse{hybridcommentsValue} to Answer2HybridGradedComment


}

relationship ManyToMany {
    Course{prof(login) required} to User
	CourseGroup{students(name)} to Student{groups(groupName)}
    Student{examSheets(name)} to ExamSheet{students(name)}
    StudentResponse{textcomments} to TextComment{studentResponse}
    StudentResponse{gradedcomments} to GradedComment{studentResponse}
}

relationship OneToOne {
	Exam{template(name)} to Template{exam(name)}
    // To change
	Question{zone} to Zone
    Exam{idzone} to Zone
    Exam{namezone} to Zone
    Exam{firstnamezone} to Zone
    Exam{notezone} to Zone
    Exam{scanfile(name)} to Scan
}


// Set pagination options
paginate * with pagination

// Use Data Transfer Objects (DTO)
 dto * with mapstruct

// Set service options to all except few
service all with serviceClass
// Set an angular suffix
// angularSuffix * with mySuffix
